# Multi-stage build for production optimization
FROM node:20-alpine AS base

# Install dependencies for building
RUN apk add --no-cache libc6-compat curl python3 make g++ && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Dependencies stage - production only
FROM base AS dependencies
COPY package*.json ./
RUN npm ci --only=production && \
    npm cache clean --force

# Build dependencies stage - all dependencies
FROM base AS build-dependencies
COPY package*.json ./
RUN npm ci && \
    npm cache clean --force

# Build stage - compile TypeScript if needed
FROM build-dependencies AS build
COPY . .
# Run any build steps if needed (e.g., TypeScript compilation)
# RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache curl tini && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nodejs

WORKDIR /app

# Copy production dependencies from dependencies stage
COPY --from=dependencies --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy application code from build stage
COPY --from=build --chown=nodejs:nodejs /app/src ./src
COPY --from=build --chown=nodejs:nodejs /app/index.js ./
COPY --from=build --chown=nodejs:nodejs /app/package*.json ./

# Copy other necessary files
COPY --chown=nodejs:nodejs .env.example ./

# Create necessary directories
RUN mkdir -p logs uploads && \
    chown -R nodejs:nodejs logs uploads

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 4000

# Health check with better error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:4000/health || exit 1

# Production environment variables
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "index.js"]
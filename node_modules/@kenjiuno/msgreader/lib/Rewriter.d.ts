import { TypeEnum } from "./Reader";
/**
 * Read a block from file, located at position in the file
 */
export type ReadFile = (view: Uint8Array, position: number) => Promise<number>;
/**
 * Write a block to file, located at position in the file
 */
export type WriteFile = (view: Uint8Array, position: number) => Promise<void>;
/**
 * A CFBF directory entry
 */
export interface CEntry {
    /**
     * File index in directory entry
     */
    id: number;
    /**
     * Name of file or directory
     */
    name: string;
    /**
     * Object type
     */
    type: TypeEnum;
    /**
     * Not used normally
     */
    clsid: Uint8Array;
    /**
     * Creation time (Windows FILETIME structure, 8 bytes)
     */
    creationTime: Uint8Array;
    /**
     * Modified time (Windows FILETIME structure, 8 bytes)
     */
    modifiedTime: Uint8Array;
}
export interface CStore {
    listEntries(parentId: number): Promise<CEntry[]>;
    deleteEntry(id: number): Promise<void>;
    addFile(name: String): Promise<number>;
    addFolder(name: String): Promise<number>;
    readFile(id: number): Promise<ReadFile>;
    writeFile(id: number, readFile: ReadFile): Promise<void>;
    flush(): Promise<void>;
}
export declare function createNew(read: ReadFile, write: WriteFile): Promise<CStore>;
export declare function open(read: ReadFile, write: WriteFile): Promise<CStore>;
